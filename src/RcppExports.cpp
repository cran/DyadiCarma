// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// add_helper
List add_helper(List l_entries, List l_aentries, List r_entries, List r_aentries, std::string type1, std::string type2, int N, int k);
RcppExport SEXP _DyadiCarma_add_helper(SEXP l_entriesSEXP, SEXP l_aentriesSEXP, SEXP r_entriesSEXP, SEXP r_aentriesSEXP, SEXP type1SEXP, SEXP type2SEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type l_aentries(l_aentriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_aentries(r_aentriesSEXP);
    Rcpp::traits::input_parameter< std::string >::type type1(type1SEXP);
    Rcpp::traits::input_parameter< std::string >::type type2(type2SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(add_helper(l_entries, l_aentries, r_entries, r_aentries, type1, type2, N, k));
    return rcpp_result_gen;
END_RCPP
}
// multiply_hv
List multiply_hv(List l_entries, List r_entries, int N, int k);
RcppExport SEXP _DyadiCarma_multiply_hv(SEXP l_entriesSEXP, SEXP r_entriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_hv(l_entries, r_entries, N, k));
    return rcpp_result_gen;
END_RCPP
}
// multiply_vv
List multiply_vv(List l_entries, List r_entries, int N, int k);
RcppExport SEXP _DyadiCarma_multiply_vv(SEXP l_entriesSEXP, SEXP r_entriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_vv(l_entries, r_entries, N, k));
    return rcpp_result_gen;
END_RCPP
}
// multiply_hasv
List multiply_hasv(List l_entries, List l_aentries, List r_entries, int N, int k, char type);
RcppExport SEXP _DyadiCarma_multiply_hasv(SEXP l_entriesSEXP, SEXP l_aentriesSEXP, SEXP r_entriesSEXP, SEXP NSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type l_aentries(l_aentriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_hasv(l_entries, l_aentries, r_entries, N, k, type));
    return rcpp_result_gen;
END_RCPP
}
// multiply_hsv
List multiply_hsv(List l_entries, List r_entries, int N, int k, char type);
RcppExport SEXP _DyadiCarma_multiply_hsv(SEXP l_entriesSEXP, SEXP r_entriesSEXP, SEXP NSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_hsv(l_entries, r_entries, N, k, type));
    return rcpp_result_gen;
END_RCPP
}
// multiply_vh
arma::mat multiply_vh(List l_entries, List r_entries, int N, int k);
RcppExport SEXP _DyadiCarma_multiply_vh(SEXP l_entriesSEXP, SEXP r_entriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_vh(l_entries, r_entries, N, k));
    return rcpp_result_gen;
END_RCPP
}
// multiply_vsh
arma::mat multiply_vsh(List l_entries, List r_entries, int N, int k, char type);
RcppExport SEXP _DyadiCarma_multiply_vsh(SEXP l_entriesSEXP, SEXP r_entriesSEXP, SEXP NSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_vsh(l_entries, r_entries, N, k, type));
    return rcpp_result_gen;
END_RCPP
}
// multiply_vash
arma::mat multiply_vash(List l_entries, List r_entries, List r_aentries, int N, int k, char type);
RcppExport SEXP _DyadiCarma_multiply_vash(SEXP l_entriesSEXP, SEXP r_entriesSEXP, SEXP r_aentriesSEXP, SEXP NSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_aentries(r_aentriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_vash(l_entries, r_entries, r_aentries, N, k, type));
    return rcpp_result_gen;
END_RCPP
}
// multiply_sas
arma::mat multiply_sas(List l_entries, List l_aentries, List r_entries, List r_aentries, int N, int k);
RcppExport SEXP _DyadiCarma_multiply_sas(SEXP l_entriesSEXP, SEXP l_aentriesSEXP, SEXP r_entriesSEXP, SEXP r_aentriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l_entries(l_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type l_aentries(l_aentriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_entries(r_entriesSEXP);
    Rcpp::traits::input_parameter< List >::type r_aentries(r_aentriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_sas(l_entries, l_aentries, r_entries, r_aentries, N, k));
    return rcpp_result_gen;
END_RCPP
}
// asymm_trans
List asymm_trans(List entries, List aentries, int N, int k);
RcppExport SEXP _DyadiCarma_asymm_trans(SEXP entriesSEXP, SEXP aentriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type entries(entriesSEXP);
    Rcpp::traits::input_parameter< List >::type aentries(aentriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(asymm_trans(entries, aentries, N, k));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_as_dyadic
List rcpp_as_dyadic(arma::mat matrix, int N, int k, std::string type);
RcppExport SEXP _DyadiCarma_rcpp_as_dyadic(SEXP matrixSEXP, SEXP NSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_as_dyadic(matrix, N, k, type));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_as_matrix
arma::mat rcpp_as_matrix(List entries, List aentries, int N, int k, std::string type);
RcppExport SEXP _DyadiCarma_rcpp_as_matrix(SEXP entriesSEXP, SEXP aentriesSEXP, SEXP NSEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type entries(entriesSEXP);
    Rcpp::traits::input_parameter< List >::type aentries(aentriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_as_matrix(entries, aentries, N, k, type));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_bandalg_core
List rcpp_bandalg_core(List entries, int N, int k);
RcppExport SEXP _DyadiCarma_rcpp_bandalg_core(SEXP entriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type entries(entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_bandalg_core(entries, N, k));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_constr
List rcpp_constr(int N, int k, String distr, NumericVector param);
RcppExport SEXP _DyadiCarma_rcpp_constr(SEXP NSEXP, SEXP kSEXP, SEXP distrSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< String >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_constr(N, k, distr, param));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dyadFac_core
List rcpp_dyadFac_core(List entries, int N, int k);
RcppExport SEXP _DyadiCarma_rcpp_dyadFac_core(SEXP entriesSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type entries(entriesSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dyadFac_core(entries, N, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DyadiCarma_add_helper", (DL_FUNC) &_DyadiCarma_add_helper, 8},
    {"_DyadiCarma_multiply_hv", (DL_FUNC) &_DyadiCarma_multiply_hv, 4},
    {"_DyadiCarma_multiply_vv", (DL_FUNC) &_DyadiCarma_multiply_vv, 4},
    {"_DyadiCarma_multiply_hasv", (DL_FUNC) &_DyadiCarma_multiply_hasv, 6},
    {"_DyadiCarma_multiply_hsv", (DL_FUNC) &_DyadiCarma_multiply_hsv, 5},
    {"_DyadiCarma_multiply_vh", (DL_FUNC) &_DyadiCarma_multiply_vh, 4},
    {"_DyadiCarma_multiply_vsh", (DL_FUNC) &_DyadiCarma_multiply_vsh, 5},
    {"_DyadiCarma_multiply_vash", (DL_FUNC) &_DyadiCarma_multiply_vash, 6},
    {"_DyadiCarma_multiply_sas", (DL_FUNC) &_DyadiCarma_multiply_sas, 6},
    {"_DyadiCarma_asymm_trans", (DL_FUNC) &_DyadiCarma_asymm_trans, 4},
    {"_DyadiCarma_rcpp_as_dyadic", (DL_FUNC) &_DyadiCarma_rcpp_as_dyadic, 4},
    {"_DyadiCarma_rcpp_as_matrix", (DL_FUNC) &_DyadiCarma_rcpp_as_matrix, 5},
    {"_DyadiCarma_rcpp_bandalg_core", (DL_FUNC) &_DyadiCarma_rcpp_bandalg_core, 3},
    {"_DyadiCarma_rcpp_constr", (DL_FUNC) &_DyadiCarma_rcpp_constr, 4},
    {"_DyadiCarma_rcpp_dyadFac_core", (DL_FUNC) &_DyadiCarma_rcpp_dyadFac_core, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_DyadiCarma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
